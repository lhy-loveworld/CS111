NAME: Hongyang Li
EMAIL: hyli@g.ucla.edu
ID: 304759850

Use 2 days grace period.

Cited Sources:
	Manual pages and TA's discussion slides
	
Answers to questions:
	QUESTION 2.1.1 - causing conflicts:
		Why does it take many iterations before errors are seen?

			Because for small iterations, the thread may complete before it gets preempted.

		Why does a significantly smaller number of iterations so seldom fail?

			Because for smaller number of iterations, the times of entering the critical section is smaller. Thus the probability of race condition is lower.

	QUESTION 2.1.2 - cost of yielding:
		Why are the --yield runs so much slower?

			Because when a thread yield, it spends a lot of time on context switching.

		Where is the additional time going?

			Context switching.

		Is it possible to get valid per-operation timings if we are using the --yield option? If so, explain how. If not, explain why not.

			It is not possible to get valid per-operation timings. Because the time spent on context switching is much larger than a single operation.

	QUESTION 2.1.3 - measurement errors:
		Why does the average cost per operation drop with increasing iterations?

			When the iterations increaseï¼Œthe impact of overall wasted time in the time slice drops. Therefore the average cost per operation drops.

		If the cost per iteration is a function of the number of iterations, how do we know how many iterations to run (or what the "correct" cost is)?

			When the number of iterations increases, the cost per iteration will not drop infinitely. It will eventually stablize at some specific point.

	QUESTION 2.1.4 - costs of serialization:
		Why do all of the options perform similarly for low numbers of threads?

			For low number of threads, the contention is very low

		Why do the three protected operations slow down as the number of threads rises?

			When the number of threads rises, each thread needs to wait for more threads to release the lock. Thus it slows down.

	QUESTION 2.2.1 - scalability of Mutex
		Compare the variation in time per mutex-protected operation vs the number of threads in Part-1 (adds) and Part-2 (sorted lists).
		Comment on the general shapes of the curves, and explain why they have this shape. Comment on the relative rates of increase and differences in the shapes of the curves, and offer an explanation for these differences.

		The cost in part 2 is much larger than part 1. Because in part 1, each operation is a simple addition or subtraction. However in part 2, each operation is more complicated and thus more expensive. As for the general shape, in part 1, the cost increases dramatically at the beginning and slows down then. In part 2, the cost almost stays the same. The reason is that in part 2, the cost of mutex locks can not compare with the cost of each operation. While in part 1, each operations cost is very low.

	QUESTION 2.2.2 - scalability of spin locks

		Compare the variation in time per protected operation vs the number of threads for list operations protected by Mutex vs Spin locks. Comment on the general shapes of the curves, and explain why they have this shape.
		Comment on the relative rates of increase and differences in the shapes of the curves, and offer an explanation for these differences.

		The time variation of Spin locks result is much larger than the result of mutex. And the cost per operation for spin locks keeps increasing while the cost for mutex keeps the same. The reason is that spin locks are much more expensive than mutex locks. As the number of threads increases, more threads will spin and thus increases the cost.
